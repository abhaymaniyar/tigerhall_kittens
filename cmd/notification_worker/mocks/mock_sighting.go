// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/notification_worker/sighting.go

// Package mock_notification_worker is a generated GoMock package.
package mock_notification_worker

import (
	context "context"
	reflect "reflect"
	model "tigerhall_kittens/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockSightingEmailNotifer is a mock of SightingEmailNotifer interface.
type MockSightingEmailNotifer struct {
	ctrl     *gomock.Controller
	recorder *MockSightingEmailNotiferMockRecorder
}

// MockSightingEmailNotiferMockRecorder is the mock recorder for MockSightingEmailNotifer.
type MockSightingEmailNotiferMockRecorder struct {
	mock *MockSightingEmailNotifer
}

// NewMockSightingEmailNotifer creates a new mock instance.
func NewMockSightingEmailNotifer(ctrl *gomock.Controller) *MockSightingEmailNotifer {
	mock := &MockSightingEmailNotifer{ctrl: ctrl}
	mock.recorder = &MockSightingEmailNotiferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightingEmailNotifer) EXPECT() *MockSightingEmailNotiferMockRecorder {
	return m.recorder
}

// ReportSightingToAllUsers mocks base method.
func (m *MockSightingEmailNotifer) ReportSightingToAllUsers(ctx context.Context, tigerID uint, sightings []model.Sighting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSightingToAllUsers", ctx, tigerID, sightings)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportSightingToAllUsers indicates an expected call of ReportSightingToAllUsers.
func (mr *MockSightingEmailNotiferMockRecorder) ReportSightingToAllUsers(ctx, tigerID, sightings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSightingToAllUsers", reflect.TypeOf((*MockSightingEmailNotifer)(nil).ReportSightingToAllUsers), ctx, tigerID, sightings)
}
