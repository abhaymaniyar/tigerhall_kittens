// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/tiger.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	model "tigerhall_kittens/internal/model"
	repository "tigerhall_kittens/internal/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockTigerRepo is a mock of TigerRepo interface.
type MockTigerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTigerRepoMockRecorder
}

// MockTigerRepoMockRecorder is the mock recorder for MockTigerRepo.
type MockTigerRepoMockRecorder struct {
	mock *MockTigerRepo
}

// NewMockTigerRepo creates a new mock instance.
func NewMockTigerRepo(ctrl *gomock.Controller) *MockTigerRepo {
	mock := &MockTigerRepo{ctrl: ctrl}
	mock.recorder = &MockTigerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTigerRepo) EXPECT() *MockTigerRepoMockRecorder {
	return m.recorder
}

// GetTiger mocks base method.
func (m *MockTigerRepo) GetTiger(ctx context.Context, opts repository.GetTigerOpts) (*model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTiger", ctx, opts)
	ret0, _ := ret[0].(*model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTiger indicates an expected call of GetTiger.
func (mr *MockTigerRepoMockRecorder) GetTiger(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTiger", reflect.TypeOf((*MockTigerRepo)(nil).GetTiger), ctx, opts)
}

// GetTigers mocks base method.
func (m *MockTigerRepo) GetTigers(ctx context.Context, opts repository.ListTigersOpts) ([]model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTigers", ctx, opts)
	ret0, _ := ret[0].([]model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTigers indicates an expected call of GetTigers.
func (mr *MockTigerRepoMockRecorder) GetTigers(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTigers", reflect.TypeOf((*MockTigerRepo)(nil).GetTigers), ctx, opts)
}

// SaveTiger mocks base method.
func (m *MockTigerRepo) SaveTiger(ctx context.Context, tiger *model.Tiger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTiger", ctx, tiger)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTiger indicates an expected call of SaveTiger.
func (mr *MockTigerRepoMockRecorder) SaveTiger(ctx, tiger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTiger", reflect.TypeOf((*MockTigerRepo)(nil).SaveTiger), ctx, tiger)
}

// UpdateTiger mocks base method.
func (m *MockTigerRepo) UpdateTiger(ctx context.Context, tiger *model.Tiger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTiger", ctx, tiger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTiger indicates an expected call of UpdateTiger.
func (mr *MockTigerRepoMockRecorder) UpdateTiger(ctx, tiger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTiger", reflect.TypeOf((*MockTigerRepo)(nil).UpdateTiger), ctx, tiger)
}
