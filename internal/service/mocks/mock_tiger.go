// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/tiger.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	model "tigerhall_kittens/internal/model"
	repository "tigerhall_kittens/internal/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockTigerService is a mock of TigerService interface.
type MockTigerService struct {
	ctrl     *gomock.Controller
	recorder *MockTigerServiceMockRecorder
}

// MockTigerServiceMockRecorder is the mock recorder for MockTigerService.
type MockTigerServiceMockRecorder struct {
	mock *MockTigerService
}

// NewMockTigerService creates a new mock instance.
func NewMockTigerService(ctrl *gomock.Controller) *MockTigerService {
	mock := &MockTigerService{ctrl: ctrl}
	mock.recorder = &MockTigerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTigerService) EXPECT() *MockTigerServiceMockRecorder {
	return m.recorder
}

// CreateTiger mocks base method.
func (m *MockTigerService) CreateTiger(ctx context.Context, tiger *model.Tiger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTiger", ctx, tiger)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTiger indicates an expected call of CreateTiger.
func (mr *MockTigerServiceMockRecorder) CreateTiger(ctx, tiger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTiger", reflect.TypeOf((*MockTigerService)(nil).CreateTiger), ctx, tiger)
}

// GetTiger mocks base method.
func (m *MockTigerService) GetTiger(ctx context.Context, opts repository.GetTigerOpts) (*model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTiger", ctx, opts)
	ret0, _ := ret[0].(*model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTiger indicates an expected call of GetTiger.
func (mr *MockTigerServiceMockRecorder) GetTiger(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTiger", reflect.TypeOf((*MockTigerService)(nil).GetTiger), ctx, opts)
}

// ListTigers mocks base method.
func (m *MockTigerService) ListTigers(ctx context.Context, opts repository.ListTigersOpts) ([]model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTigers", ctx, opts)
	ret0, _ := ret[0].([]model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTigers indicates an expected call of ListTigers.
func (mr *MockTigerServiceMockRecorder) ListTigers(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTigers", reflect.TypeOf((*MockTigerService)(nil).ListTigers), ctx, opts)
}
